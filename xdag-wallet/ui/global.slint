import "./assets/msyh.ttf";

//! global styles
export global ROOT_GLOBAL {
    in-out property <string> version:"version 0.1.0 alpha";
    in-out property <string> twitter:"https://x.com/XDAG_Community";
    in-out property <string> discord:"https://discord.com/invite/Nf72gd9";
    in-out property <string> telegram:"https://www.telegram.me/dagger_cryptocurrency";
    in-out property <string> home-site:"https://xdag.io/";
    in-out property <length> window-height: 680px;
    in-out property <length> window-width: 1080px;
    in-out property <length> font-size: 16px;
    in-out property <int> font-weight: 400;
    in-out property <length> padding: 0px;
    in-out property <string> font-family: "Microsoft YaHei";
    //colors
    in-out property <color> mainColor:#63D0DFFF;
    in-out property <color> mainColor54:#63d1dfcf;
    in-out property <color> bgColor:#13151AFF;
    in-out property <color> bgColor2:#1a1d24ff;
    in-out property <color> bgColorMask:#08080AFF;
    in-out property <color> bgColorMask2:#090A0CFF;
    in-out property <color> bgColorMask-transparent:#090A0CBB;
    in-out property <color> lineColor:#2A2D32FF;
    in-out property <color> lineColor54:#2A2D328A;
    in-out property <color> blockColor:#1F222AFF;
    in-out property <color> bottomNavColor:#A0A3BDCC;
    in-out property <color> textColorGray:#c3c5d2cc;
    in-out property <color> transactionColor:#A0A3BD4D;
    in-out property <color> greenColor:#42b669;
    in-out property <color> greenColorMask:#168A3C66;
    in-out property <color> versionColor:#828080de;
    in-out property <color> borderColor:#3A3A3A;

  // 20% opacity
  in-out property <color> redColor:#DD4556FF;
    in-out property <color> yellowColor:#E8B000FF;
  // gold
  in-out property <color> redColorMask:#DD455633;
  // 20% opacity
  in-out property <color> redColorMask2:#DD455666;
  // 40% opacity
}

export struct WalletItem  {
  name: string,
  locked: bool,
  password: string,
  mnemonic: string,
  address: string,
  balance: string,
  privatekey: string,
}

export global UiWallets {
    in property <[WalletItem]> ui-wallets:[
        // {
        //     name:"aaa",
        //     locked:false,
        //     password:"111111",
        //     mnemonic:"",
        //     address:"AvqFVndNNydEGzk2jue2FJHkkEaFvoRLC",
        //     balance:"0.0",
        //     privatekey:""
        // },
        // {
        //     name:"bbb",
        //     locked:false,
        //     password:"111111",
        //     mnemonic:"",
        //     address:"BvqFVndNNydEGzk2jue2FJHkkEaFvoRLC",
        //     balance:"1.1",
        //     privatekey:""
        // },
        // {
        //     name:"ccc",
        //     locked:false,
        //     password:"",
        //     mnemonic:"",
        //     address:"CvqFVndNNydEGzk2jue2FJHkkEaFvoRLC",
        //     balance:"2.2",
        //     privatekey:""
        // },
        // {
        //     name:"ddd",
        //     locked:false,
        //     password:"",
        //     mnemonic:"",
        //     address:"DvqFVndNNydEGzk2jue2FJHkkEaFvoRLC",
        //     balance:"3.3",
        //     privatekey:""
        // },
        // {
        //     name:"eee",
        //     locked:false,
        //     password:"",
        //     mnemonic:"",
        //     address:"EvqFVndNNydEGzk2jue2FJHkkEaFvoRLC",
        //     balance:"4.4",
        //     privatekey:""
        // },
        // {
        //     name:"ffffff",
        //     locked:false,
        //     password:"",
        //     mnemonic:"",
        //     address:"FvqFVndNNydEGzk2jue2FJHkkEaFvoRLC",
        //     balance:"5.5",
        //     privatekey:""
        // },
    ];
}

export enum TranxType { input, output, snapshot }
export struct TranxItem  {
  tranxType: TranxType,
  amount: string,
  time: string,
  day: string,
  remark: string,
  address: string,
}

export struct TranxDay  {
  day: string,
  item: [TranxItem],
}

export struct FavoriteAddr {
  name: string,
  address: string,
}

export struct TransxBlockInfo {
    state:string,
    address:string,
    hash:string,
    fee: string,
}
export global WalletAccounts {
    in-out property <bool> is-test: false;
    in-out property <bool> fetching:true;
    in-out property <bool> is-tranx-empty: true;
    in-out property <bool> block-refreshing: false;
    in-out property <bool> block-refreshed: false;
    in-out property <bool> sending: false;
    in-out property <bool> sent: false;
    in-out property <bool> is-lock: false;
    in-out property <bool> is-change-pswd: false;
    in-out property <[FavoriteAddr]> favorite-model:[
        // { address:"4duPWMbYUgAifVYkKDCWxLvRRkSByf5gb", name:"Community Fund" },
        // { address:"4RfUFL7XwLi3gaprob6uPUQ41dHbnjcD6", name:"trade" },
    ];
    in-out property <[TranxDay]> tranx-model:[];
    //   [
    //     {
    //         day:"2025-01-12",
    //         item:[
    //             {
    //                 day:"2025-01-12",
    //                 time:"13:06:03 UTC",
    //                 amount:"+99999.90",
    //                 tranxType:TranxType.input,
    //                 remark:"test111",
    //                 address:"4RfUFL7XwLi3gaprob6uPUQ41dHbnjcD6"
    //             },
    //             {
    //                 day:"2025-01-12",
    //                 time:"13:06:03 UTC",
    //                 amount:"+99999.90",
    //                 tranxType:TranxType.input,
    //                 remark:"test111",
    //                 address:"4RfUFL7XwLi3gaprob6uPUQ41dHbnjcD6"
    //             }
    //         ]
    //     },
    //     {
    //         day:"2024-09-11",
    //         item:[
    //             {
    //                 day:"2024-09-11",
    //                 time:"11:02:03 UTC",
    //                 amount:"-0.90",
    //                 tranxType: TranxType.output,
    //                 remark:"test111",
    //                 address:"4RfUFL7XwLi3gaprob6uPUQ41dHbnjcD6"
    //             },
    //             {
    //                 day:"2024-09-11",
    //                 time:"11:02:03 UTC",
    //                 amount:"-0.90",
    //                 tranxType: TranxType.output,
    //                 remark:"test111",
    //                 address:"4RfUFL7XwLi3gaprob6uPUQ41dHbnjcD6"
    //             },
    //             {
    //                 day:"2024-09-11",
    //                 time:"11:02:03 UTC",
    //                 amount:"-0.90",
    //                 tranxType: TranxType.output,
    //                 remark:"test111",
    //                 address:"4RfUFL7XwLi3gaprob6uPUQ41dHbnjcD6"
    //             },
    //             {
    //                 day:"2024-09-11",
    //                 time:"11:02:03 UTC",
    //                 amount:"-0.90",
    //                 tranxType: TranxType.output,
    //                 remark:"test111",
    //                 address:"4RfUFL7XwLi3gaprob6uPUQ41dHbnjcD6"
    //             }
    //         ]
    //     },
    //     {
    //         day:"2024-08-21",
    //         item:[
    //             {
    //                 day:"2024-08-21",
    //                 time:"21:35:03 UTC",
    //                 amount:"9999999999.99",
    //                 tranxType: TranxType.snapshot,
    //                 remark:"test111",
    //                 address:"4RfUFL7XwLi3gaprob6uPUQ41dHbnjcD6"
    //             }
    //         ]
    //     },
    // ];
    in-out property <[[string]]> current-mnemonic: [
        // ["caught", "industry", "sorry", "science"],
        // ["symbol", "life", "club", "sausage"],
        // ["kitten", "tourist", "shadow", "transfer"]
    ];
    in-out property <TransxBlockInfo> current-block-info;
    in-out property <string> current-address;
    in-out property <string> current-balance;
    in-out property <bool> err-visible;
    in-out property <string> err-message;
    in-out property <TranxItem> current-tx-item;
    in-out property <image> qrcode;
    callback fetch-history(is-test: bool, address: string);
    // callback character-count(text: string) -> string;
    callback send-xdag(is-test: bool, mnemonic: string, from: string, to: string, amount: string, remark: string);
    callback create-wallet(name: string, password: string, mnemonic: string); // mnemonic is empty when creating a new wallet, otherwise import a wallet
  callback set-config();
    callback add-contact(name: string, address: string);
    callback delete-contact(index: int);
    callback delete-wallet(index: int);
    callback gen-mnemonic-array(mnemonic: string);
    callback open-in-browser(is-test: bool, address: string);
    callback get-tranx-block(is-test: bool, address: string, direct: TranxType);
    callback open-link(url: string);
    callback rename-wallet(old: string, new: string);
    callback change-password(old: string, new: string);
    callback check_wallet_pswd(string) -> bool;
}
